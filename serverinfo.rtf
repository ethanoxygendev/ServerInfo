{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AppleColorEmoji;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 const \{\
    ChatInputCommandInteraction,\
    EmbedBuilder,\
    ChannelType,\
    GuildVerificationLevel,\
    GuildExplicitContentFilter,\
    GuildNSFWLevel\
\} = require("discord.js");\
\
module.exports = \{\
    name: "serverinfo",\
    description: "Displays information about the server.",\
    /**    \
     * @param \{ChatInputCommandInteraction\} interaction \
     */\
    async execute(interaction) \{\
        const \{ guild \} = interaction;\
        const \{\
            members,\
            channels,\
            emojis,\
            roles,\
            stickers\
        \} = guild;\
        \
        const sortedRoles  = roles.cache.map(role => role).slice(1, roles.cache.size).sort((a, b) => b.position - a.position);\
        const userRoles    = sortedRoles.filter(role => !role.managed);\
        const managedRoles = sortedRoles.filter(role => role.managed);\
        const botCount     = members.cache.filter(member => member.user.bot).size;\
\
        const maxDisplayRoles = (roles, maxFieldLength = 1024) => \{\
            let totalLength = 0;\
            const result = [];\
\
            for (const role of roles) \{\
                const roleString = `<@&$\{role.id\}>`;\
\
                if (roleString.length + totalLength > maxFieldLength)\
                    break;\
\
                totalLength += roleString.length + 1; // +1 as it's likely we want to display them with a space between each role, which counts towards the limit.\
                result.push(roleString);\
            \}\
\
            return result.length;\
        \}\
\
        const splitPascal = (string, separator) => string.split(/(?=[A-Z])/).join(separator);\
        const toPascalCase = (string, separator = false) => \{\
            const pascal = string.charAt(0).toUpperCase() + string.slice(1).toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (match, chr) => chr.toUpperCase());\
            return separator ? splitPascal(pascal, separator) : pascal;\
        \};\
\
        const getChannelTypeSize = type => channels.cache.filter(channel => type.includes(channel.type)).size;\
        \
        const totalChannels = getChannelTypeSize([\
            ChannelType.GuildText,\
            ChannelType.GuildNews,\
            ChannelType.GuildVoice,\
            ChannelType.GuildStageVoice,\
            ChannelType.GuildForum,\
            ChannelType.GuildPublicThread,\
            ChannelType.GuildPrivateThread,\
            ChannelType.GuildNewsThread,\
            ChannelType.GuildCategory\
        ]);\
\
        interaction.reply(\{ embeds: [\
            new EmbedBuilder()\
                .setColor(members.me.roles.highest.hexColor)\
                .setTitle(`$\{guild.name\}'s Information`)\
                .setThumbnail(guild.iconURL(\{ size: 1024 \}))\
                .setImage(guild.bannerURL(\{ size: 1024 \}))\
                .addFields(\
                    \{ name: "Description", value: `
\f1 \uc0\u55357 \u56541 
\f0  $\{guild.description || "None"\}` \},\
                    \{\
                        name: "General",\
                        value: [\
                            `
\f1 \uc0\u55357 \u56540 
\f0  **Created** <t:$\{parseInt(guild.createdTimestamp / 1000)\}:R>`,\
                            `
\f1 \uc0\u55357 \u56499 
\f0  **ID** $\{guild.id\}`,\
                            `
\f1 \uc0\u55357 \u56401 
\f0  **Owner** <@$\{guild.ownerId\}>`,\
                            `
\f1 \uc0\u55356 \u57101 
\f0  **Language** $\{new Intl.DisplayNames(["en"], \{ type: "language" \}).of(guild.preferredLocale)\}`,\
                            `
\f1 \uc0\u55357 \u56507 
\f0  **Vanity URL** $\{guild.vanityURLCode || "None"\}`,\
                        ].join("\\n")\
                    \},\
                    \{ name: "Features", value: guild.features?.map(feature => `- $\{toPascalCase(feature, " ")\}`)?.join("\\n") || "None", inline: true \},\
                    \{\
                        name: "Security",\
                        value: [\
                            `
\f1 \uc0\u55357 \u56384 
\f0  **Explicit Filter** $\{splitPascal(GuildExplicitContentFilter[guild.explicitContentFilter], " ")\}`,\
                            `
\f1 \uc0\u55357 \u56606 
\f0  **NSFW Level** $\{splitPascal(GuildNSFWLevel[guild.nsfwLevel], " ")\}`,\
                            `
\f1 \uc0\u55357 \u56594 
\f0  **Verification Level** $\{splitPascal(GuildVerificationLevel[guild.verificationLevel], " ")\}`\
                        ].join("\\n"),\
                        inline: true\
                    \},\
                    \{\
                        name: `Users ($\{guild.memberCount\})`,\
                        value: [\
                            `
\f1 \uc0\u55357 \u56424 \u8205 \u55357 \u56425 \u8205 \u55357 \u56423 \u8205 \u55357 \u56422 
\f0  **Members** $\{guild.memberCount - botCount\}`,\
                            `
\f1 \uc0\u55358 \u56598 
\f0  **Bots** $\{botCount\}`\
                        ].join("\\n"),\
                        inline: true\
                    \},\
                    \{ name: `User Roles ($\{maxDisplayRoles(userRoles)\} of $\{userRoles.length\})`, value: `$\{userRoles.slice(0, maxDisplayRoles(userRoles)).join(" ") || "None"\}`\},\
                    \{ name: `Managed Roles ($\{maxDisplayRoles(managedRoles)\} of $\{managedRoles.length\})`, value: `$\{managedRoles.slice(0, maxDisplayRoles(managedRoles)).join(" ") || "None"\}`\},\
                    \{\
                        name: `Channels, Threads & Categories ($\{totalChannels\})`,\
                        value: [\
                            `
\f1 \uc0\u55357 \u56492 
\f0  **Text** $\{getChannelTypeSize([ChannelType.GuildText, ChannelType.GuildForum, ChannelType.GuildNews])\}`,\
                            `
\f1 \uc0\u55356 \u57241 
\f0  **Voice** $\{getChannelTypeSize([ChannelType.GuildVoice, ChannelType.GuildStageVoice])\}`,\
                            `
\f1 \uc0\u55358 \u56821 
\f0  **Threads** $\{getChannelTypeSize([ChannelType.GuildPublicThread, ChannelType.GuildPrivateThread, ChannelType.GuildNewsThread])\}`,\
                            `
\f1 \uc0\u55357 \u56529 
\f0  **Categories** $\{getChannelTypeSize([ChannelType.GuildCategory])\}`\
                        ].join("\\n"),\
                        inline: true\
                    \},\
                    \{\
                        name: `Emojis & Stickers ($\{emojis.cache.size + stickers.cache.size\})`,\
                        value: [\
                            `
\f1 \uc0\u55357 \u56570 
\f0  **Animated** $\{emojis.cache.filter(emoji => emoji.animated).size\}`,\
                            `
\f1 \uc0\u55357 \u56831 
\f0  **Static** $\{emojis.cache.filter(emoji => !emoji.animated).size\}`,\
                            `
\f1 \uc0\u55356 \u57335 
\f0  **Stickers** $\{stickers.cache.size\}`\
                        ].join("\\n"),\
                        inline: true\
                    \},\
                    \{ \
                        name: "Nitro",\
                        value: [\
                            `
\f1 \uc0\u55357 \u56520 
\f0  **Tier** $\{guild.premiumTier || "None"\}`,\
                            `
\f1 \uc0\u55357 \u56490 \u55356 \u57339 
\f0  **Boosts** $\{guild.premiumSubscriptionCount\}`,\
                            `
\f1 \uc0\u55357 \u56462 
\f0  **Boosters** $\{guild.members.cache.filter(member => member.roles.premiumSubscriberRole).size\}`,\
                            `
\f1 \uc0\u55356 \u57291 \u55356 \u57339 \u8205 \u9792 \u65039 
\f0  **Total Boosters** $\{guild.members.cache.filter(member => member.premiumSince).size\}`\
                        ].join("\\n"),\
                        inline: true\
                    \},\
                    \{ name: "Banner", value: guild.bannerURL() ? "** **" : "None" \}\
                )\
        ], ephemeral: true \});\
    \}\
\}\
}